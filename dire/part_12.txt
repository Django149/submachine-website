=== ./src\components\Preloader.js ===
import React, { useEffect, useState } from 'react';
import './Preloader.css';

const Preloader = () => {
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Wait for the window to load, then set loading to false
    window.onload = () => {
      setLoading(false);
    };
  }, []);

  return (
    loading && (
      <div id="js-preloader" className="js-preloader">
        <div className="preloader-inner">
          <span className="dot"></span>
          <div className="dots">
            <span></span>
            <span></span>
            <span></span>
          </div>
        </div>
      </div>
    )
  );
};

export default Preloader;


=== ./src\components\PrivateRoute.js ===
import React from 'react';
import { Route, Navigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext'; // Context you create for auth

const PrivateRoute = ({ children }) => {
  const { currentUser } = useAuth();  // Get the current user from context
  console.log("CurrentUser:", currentUser);

  return currentUser ? children : <Navigate to="/login" />;
};

export default PrivateRoute;


=== ./src\components\ScrollToTop.js ===
import { useEffect } from "react"
import { useLocation } from "react-router-dom"

function ScrollToTop({ children }) {
  const location = useLocation()

  useEffect(() => {
    window.scrollTo(0, 0)
  }, [location.pathname])

  return children
}

export default ScrollToTop


=== ./src\contexts\AuthContext.js ===
// src/contexts/AuthContext.js
import React, { useContext, useState, useEffect, createContext } from "react"
import * as authService from "../services/authService"

const AuthContext = createContext({
  currentUser: null,
  signup: authService.signup,
  login: authService.login,
  logout: authService.logout,
  resetPassword: authService.resetPassword,
  signInWithGoogle: authService.signInWithGoogle,
})

export function useAuth() {
  return useContext(AuthContext)
}

export const AuthProvider = ({ children }) => {
  const [currentUser, setCurrentUser] = useState(null)
  const [loading, setLoading] = useState(true)
  useEffect(() => {
    const unsubscribe = authService.auth.onAuthStateChanged((user) => {
      setCurrentUser(user)
      setLoading(false)
    })

    return unsubscribe // Cleanup subscription
  }, [])

  const value = {
    currentUser,
    signup: authService.signup,
    login: authService.login,
    logout: authService.logout,
    resetPassword: authService.resetPassword,
    signInWithGoogle: authService.signInWithGoogle,
  }

  return (
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  )
}


